#include "IntArray.h"
#include <iostream>
#include <algorithm> // copy を使うためのヘッダファイル
#include <cstdlib>
using namespace std;

IntArray::IntArray(int size) {
  m_array = new int[size];
  m_size  = size;

  cout << "コンストラクタが呼ばれました。"
       << "要素数は " << m_size << " です。" << endl;
}

// コピーコンストラクタ
IntArray::IntArray(const IntArray& other) {
  m_array = new int[other.m_size];
  m_size  = other.m_size;

  // copy はメモリの内容をコピーするようなもの
  // 第 1 引数以上、第 2 引数未満のアドレスにあるデータを
  // 第 3 引数の指すアドレスへコピーする
  copy(other.m_array, other.m_array + m_size, m_array);

  cout << "コピーコンストラクタが呼ばれました。" << endl;
}

IntArray::~IntArray() {
  delete[] m_array;
  
  cout << "デストラクタが呼ばれました。"
       << "要素数は " << m_size << " でした。" << endl;
}

void IntArray::operator=(const IntArray& other) {
  int* array = new int[other.m_size];

  delete[] m_array;
  m_array = array;
  m_size = other.m_size;
  copy(other.m_array, other.m_array + m_size, m_array);
}

int IntArray::Get(int i) const {
  CheckIndex(i);
  return m_array[i];
}
// 配列のサイズを返す
int IntArray::Size() const {
  return m_size;
}
void IntArray::Set(int i, int value) {
  CheckIndex(i);
  m_array[i] = value;
}
void IntArray::CheckIndex(int i) {
  if(0 <= i && i < m_size) {
    // インデックスは正常です
  } else {
    cout << "インデックスが不正です！" << endl
         << "値 : " << i << endl;
    exit(EXIT_FAILURE);
  }  
}
